import stanza
import re

# T√©l√©charger le mod√®le fran√ßais si n√©cessaire
stanza.download("fr")

# Initialiser le pipeline NLP avec Tokenization, POS et NER
nlp = stanza.Pipeline("fr", processors="tokenize,pos,ner")

def clean_text(text):
    """Nettoie le texte transcrit pour √©viter les erreurs NLP"""
    text = text.lower().strip()  # Mise en minuscules et suppression des espaces inutiles
    text = re.sub(r'\s+', ' ', text)  # Remplace plusieurs espaces par un seul
    text = re.sub(r'[^a-zA-Z√Ä-√ø0-9\s]', '', text)  # Supprime caract√®res sp√©ciaux sauf espaces
    text = re.sub(r'\b(euh|bah|heu|mmm|ben|ouais|voil√†)\b', '', text)  # Supprime les mots parasites
    return text

def extract_city_and_horizon(text):
    """Extrait le nom de la ville et l'horizon temporel du texte"""
    cleaned_text = clean_text(text)
    doc = nlp(cleaned_text)

    city = None
    horizon = None

    # üîπ Extraction des lieux (villes)
    for ent in doc.ents:
        if ent.type == "LOC":  # V√©rifie si l'entit√© est une localisation
            city = ent.text
            break  # On prend la premi√®re ville d√©tect√©e

    # üîπ Extraction des horizons temporels avec regex
    horizon_patterns = [
        r"\b(dans\s+\d+\s+(jours|semaines|mois|ans))\b",
        r"\b(la semaine prochaine|le mois prochain|l'ann√©e prochaine)\b",
        r"\b(demain|apr√®s-demain|aujourd'hui)\b"
    ]

    for pattern in horizon_patterns:
        match = re.search(pattern, cleaned_text, re.IGNORECASE)
        if match:
            horizon = match.group(0)  # Prend la premi√®re correspondance trouv√©e
            break

    return city, horizon

# üîç Exemple de test (simulation du Speech-to-Text)
transcribed_text = "euh m√©t√©o Paris dans 3 jours"
city, horizon = extract_city_and_horizon(transcribed_text)

if city:
    print(f"üèô Ville d√©tect√©e : {city}")
else:
    print("‚ö† Aucune ville d√©tect√©e.")

if horizon:
    print(f"üìÖ Horizon d√©tect√© : {horizon}")
else:
    print("‚ö† Aucun horizon temporel d√©tect√©.")
